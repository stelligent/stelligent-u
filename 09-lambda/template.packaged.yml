AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  LambdaRoleName:
    Type: String
    Default: HelloLambdaRole
  LambdaFunctionName:
    Type: String
    Default: SimpleHelloFunction
  apiGatewayName:
    Type: String
    Default: my-api
  apiGatewayStageName:
    Type: String
    AllowedPattern: '[a-z0-9]+'
    Default: call
  apiGatewayHTTPMethod:
    Type: String
    Default: POST
Resources:
  HelloLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Ref: LambdaRoleName
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
  HelloLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: HelloLambdaFunction
      Role:
        Fn::GetAtt:
        - HelloLambdaRole
        - Arn
      Runtime: python3.7
      Handler: lambda_one.my_handler
      Code:
        S3Bucket: stelligent-u-fidelisogunsanmi
        S3Key: 712997f65aed8ee758e966e8ac3f3c9f
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: apilambdaaccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource:
              Fn::GetAtt:
              - HelloLambdaFunction
              - Arn
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Ref: apiGatewayName
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: lambda
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      MethodResponses:
      - StatusCode: '200'
      AuthorizationType: AWS_IAM
      Integration:
        Type: AWS_PROXY
        Credentials:
          Fn::GetAtt:
          - ApiGatewayRole
          - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - StatusCode: '200'
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloLambdaFunction.Arn}/invocations
      OperationName: lambda
      ResourceId:
        Ref: ApiGatewayResource
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      RestApiId:
        Ref: ApiGatewayRestApi
      Schema: {}
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId:
        Ref: ApiGatewayRestApi
      StageName: v0
