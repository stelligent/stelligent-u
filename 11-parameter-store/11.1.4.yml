---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Name:
    Description: Name of the engineer
    Type: AWS::SSM::Parameter::Value<String>
    Default: /will.deberry.labs/stelligent-u/lab11/name

  Team:
    Description: Team that the engineer belongs to
    Type: AWS::SSM::Parameter::Value<String>
    Default: /will.deberry.labs/stelligent-u/lab11/name/team

  Timezone:
    Description: Timezone that the engineer lives in
    Type: AWS::SSM::Parameter::Value<String>
    Default: /will.deberry.labs/stelligent-u/lab11/name/timezone

  State:
    Description: State that the engineer lives in
    Type: AWS::SSM::Parameter::Value<String>
    Default: /will.deberry.labs/stelligent-u/lab11/name/state

  StartDate:
    Description: Start date that the engineer joined the team
    Type: AWS::SSM::Parameter::Value<String>
    Default: /will.deberry.labs/stelligent-u/lab11/name/startDate

  MiddleName:
    Description: Middle name of the engineer
    Type: String
    Default: ${{resolve:ssm-secure:/will.deberry.labs/stelligent-u/lab11/name/middleName:1}}

Resources:
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref SG
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      Tags:
        - Key: Name
          Value: willDeBerry-alb
      Type: application

  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: '/index.html'
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: willDeBerry-elb
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 20
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ELBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ELBListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:324320755747:certificate/8466cabe-7da0-4dc8-9b00-e56bf8326838
      DefaultActions:
        - TargetGroupArn: !Ref ELBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-FS-2018-06

  WebServerAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: 'AutomationBoxes'
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      DesiredCapacity: '3'
      HealthCheckType: 'ELB'
      HealthCheckGracePeriod: 30
      LaunchConfigurationName: !Ref WebServersLC
      MaxSize: '3'
      MinSize: '3'
      TargetGroupARNs:
        - !Ref ELBTargetGroup

  WebServersLC:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: ami-0cff7528ff583bf9a
      InstanceType: 't2.micro'
      LaunchConfigurationName: 'SimpleWebServerLC'
      SecurityGroups:
        - !Ref SG
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe

            amazon-linux-extras install nginx1.12

            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --resource WebServersLC \
              --configsets All \
              --region ${AWS::Region}

            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource WebServersLC \
              --region ${AWS::Region}

    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureStelligentProject
        ConfigureStelligentProject:
          packages:
            yum:
              nginx: []
          files:
            /usr/share/nginx/html/index.html:
              content: !Sub |
                "<ul><li>${Name}</li><li>${Team}</li><li>${Timezone}</li><li>${State}</li><li>${StartDate}</li><li>${MiddleName}</li></ul>"
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: willDeBerry-vpc

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        us-east-1b
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: willDeBerry-subnet
      VpcId: !Ref VPC

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        us-east-1c
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: willDeBerry-subnet
      VpcId: !Ref VPC

  SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow port 80
          FromPort: 80
          IpProtocol: 6
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: Allow port 443
          FromPort: 443
          IpProtocol: 6
          ToPort: 443
      Tags:
        - Key: Name
          Value: willDeBerry-sg-http
      VpcId: !Ref VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: willDeBerry-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: willDeBerry-routeTable-1
      VpcId: !Ref VPC

  Route1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref RouteTable

  Subnet1RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1

  Subnet2RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2
