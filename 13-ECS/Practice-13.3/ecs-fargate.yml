Description: An ECS Fargate Cluster

Parameters:
  Name:
    Description: Name of the Repository
    Type: String
  ECRRepositoryName:
    Description: The name of the repository on Github
    Type: String
    Default: ecr
  ImageTag:
    Description: The Image tag in the repoitory (e.g 2.xx, latest)
    Type: String
    Default: latest

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicSubnet1:
      CIDR: '10.0.0.0/24'
    PublicSubnet2:
      CIDR: '10.0.1.0/24'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      EnableDnsHostnames: true
      EnableDnsSupport: true
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicSubnet1', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicSubnet2', 'CIDR']
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  
  # ECS Cluster Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${Name}-desmond"
      Tags:
        - Key: "Name"
          Value: "desmond.ndambi.labs"
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  LBSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - LBSecurityGroup
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - ServiceSecurityGroup
          - GroupId
      FromPort: 80
      ToPort: 80
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS/MyApp/Service/SecurityGroup
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
  ServiceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - ServiceSecurityGroup
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - LBSecurityGroup
          - GroupId
      ToPort: 80
  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups:
        - Fn::GetAtt:
            - LBSecurityGroup
            - GroupId
    DependsOn:
      - PublicRoute
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref LBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ECSALB
      Port: 80
      Protocol: HTTP
  LBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
  TaskDefTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  TaskDefExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "TaskDefExecutionRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy" 
  TaskDefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      ContainerDefinitions: 
        - Name: "nginx"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}:${ImageTag}"
          Cpu: "128"
          PortMappings:
            - ContainerPort: "80"
              Protocol: "tcp"
              HostPort: "80"
          Memory: "256"
          Essential: "true"         
      ExecutionRoleArn: !Ref TaskDefExecutionRole
      NetworkMode: "awsvpc"
      Cpu: "256"
      Memory: "512"
      RuntimePlatform:
        {
          "OperatingSystemFamily": "LINUX",
          "CpuArchitecture": "X86_64"
        }
  ECSService: 
    Type: AWS::ECS::Service
    DependsOn:
      - ECSALB
    Properties:
      ServiceName: "ECSService"
      Cluster: !Ref ECSCluster
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          {
            "Enable" : "true",
            "Rollback" : "true"
          }
        MaximumPercent: "200"
        MinimumHealthyPercent: "100"
      DesiredCount: "1"
      HealthCheckGracePeriodSeconds: "200"
      LaunchType: "FARGATE"
      LoadBalancers:
        - ContainerName: "nginx"
          ContainerPort: "80"
          TargetGroupArn: !Ref LBTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
            AssignPublicIp: "ENABLED"
            SecurityGroups: 
              - !Ref ServiceSecurityGroup
            Subnets: 
              - Ref: PublicSubnetOne
              - Ref: PublicSubnetTwo
      TaskDefinition: !Ref TaskDefinition

Outputs:
  WebAppLB:
    Description: Web Application Load Balancer
    Value: !Join [ "", [ 'http://', !GetAtt ECSALB.DNSName ] ]
    Export:
      Name: !Sub ${Name}-LB
