Description: Jenkins Continuous Learning
Parameters:
  PrivateIp:
    Type: String
    Description: Private Ip used for the VPC
    Default: 10.0.0.0
  VPCMask:
    Type: String
    Description: Mask used for the VPC
    Default: 16
  IAMUserOwnerOfResources:
    Type: String
    Description: IAM user that is owner of this CFN stack
  EC2InstanceAmi:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: EC2 Instance AMI
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  EC2KeyName:
    Type: String
    Description: Name of the EC2 keys used for ssh
    Default: <If using this parameter, provide default name>
  IAMUserOwnerIp:
    Type: String
    Description: IP of the Iam user owner
    Default: <If using this parameter,provide default IP>
  EC2InstanceType:
    Type: String
    Default: <If using this parameter, provide instance>  
Resources:
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Join ['/', [!Ref PrivateIp, !Ref VPCMask ] ]
      Tags: &ResourceTags
        -
          Key: user
          Value: !Ref IAMUserOwnerOfResources
        -
          Key: stack
          Value: !Ref "AWS::StackId"
  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Join ['/', [!Ref PrivateIp, '25' ] ]
      Tags:
        -
          Key: user
          Value: !Ref IAMUserOwnerOfResources
        -
          Key: stack
          Value: !Ref "AWS::StackId"
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachInternetGatewayToVpc:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyInternetGateway
      VpcId: !Ref MyVpc
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyRouteTable
      SubnetId: !Ref MySubnet
  MyRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyRouteTable
      GatewayId: !Ref MyInternetGateway
      DestinationCidrBlock: '0.0.0.0/0'
  MyEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ICMP/ping & SSH access
      GroupName:  !Join ['-', [!Ref 'AWS::StackName', SecurityGroup] ]
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        -
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        -
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        -
          FromPort: 8080
          ToPort: 8080
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        -
          FromPort: -1
          ToPort: -1
          IpProtocol: icmp
          CidrIp: 0.0.0.0/0
  MyEC2InstanceIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref MyEC2Instance
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref MySubnet
      KeyName: !Ref EC2KeyName
      ImageId: !Ref EC2InstanceAmi
      InstanceType: !Ref EC2InstanceType
      SecurityGroupIds:
        - !Ref MyEC2SecurityGroup
      Tags:
        -
          Key: user
          Value: !Ref IAMUserOwnerOfResources
        -
          Key: stack
          Value: !Ref "AWS::StackId"
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y java-1.8.0-openjdk-devel
          alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java
          alternatives --set javac /usr/lib/jvm/java-1.8.0-openjdk.x86_64/bin/javac
          yum install -y wget
          wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
          rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
          yum upgrade
          amazon-linux-extras install java-openjdk11 -y
          yum install -y jenkins
          systemctl enable jenkins
          systemctl start jenkins
          sed s/  /etc/sysconfig/jenkins
  MyNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVpc
  MyNetworkEntryMySubnetIngressAllTraffic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 100
      RuleAction: deny
      Protocol: -1
      Egress: True
      CidrBlock: 0.0.0.0/0
  MyNetworkEntryMySubnetIngressIamOwner:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 101
      RuleAction: allow
      Protocol: 6
      CidrBlock: !Join ['/', [!Ref IAMUserOwnerIp, '32' ] ]
      PortRange:
        From: 22
        To: 22
  MyNetworkEntryMySubnetEgressIamOwner:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 101
      RuleAction: allow
      Protocol: -1
      Egress: True
      CidrBlock: !Join ['/', [!Ref IAMUserOwnerIp, '32' ] ]
  MyNetworkEntryMySecondSubnetIngressAllTraffic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 200
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Join ['/', ["10.0.0.128", '25' ] ]
  MyNetworkEntryMySecondSubnetIngressAllSsh:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 201
      RuleAction: allow
      Protocol: 6
      CidrBlock: !Join ['/', ["10.0.0.128", '25' ] ]
      PortRange:
        From: 22
        To: 22
  MyNetworkEntryMySecondSubnetIngressAllPing:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 202
      RuleAction: allow
      Protocol: 1
      CidrBlock: !Join ['/', ["10.0.0.128", '25' ] ]
      Icmp:
        Code: -1
        Type: -1
      PortRange:
        From: 8
        To: -1
  MyNetworkEntryMySecondSubnetIngressAllHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 203
      RuleAction: allow
      Protocol: 6
      CidrBlock: !Join ['/', ["10.0.0.128", '25' ] ]
      PortRange:
        From: 80
        To: 80
  MyNetworkEntryMySecondSubnetIngressAllJenkins:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 205
      RuleAction: allow
      Protocol: 6
      CidrBlock: !Join ['/', ["10.0.0.128", '25' ] ]
      PortRange:
        From: 8080
        To: 8080
  MyNetworkEntryMySecondSubnetEgressAllTraffic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 204
      RuleAction: allow
      Egress: True
      Protocol: -1
      CidrBlock: !Join ['/', ["10.0.0.128", '25' ] ]
      PortRange:
        From: 0
        To: 65000
  MySecondSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Join ['/', ["10.0.0.128", '25' ] ]
      Tags:
        -
          Key: user
          Value: !Ref IAMUserOwnerOfResources
        -
          Key: stack
          Value: !Ref "AWS::StackId"
  MySecondRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
  SecondSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MySecondRouteTable
      SubnetId: !Ref MySecondSubnet
  MySecondRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MySecondRouteTable
      NatGatewayId: !Ref MyNatGateway
      DestinationCidrBlock: '0.0.0.0/0'
  MyNatGatewayInstanceIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  MyNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [ MyNatGatewayInstanceIp, AllocationId ]
      SubnetId: !Ref MySubnet
  MySecondEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref MySecondSubnet
      KeyName: !Ref EC2KeyName
      ImageId: !Ref EC2InstanceAmi
      SecurityGroupIds:
        - !Ref MyEC2SecurityGroup
      Tags:
        -
          Key: user
          Value: !Ref IAMUserOwnerOfResources
        -
          Key: stack
          Value: !Ref "AWS::StackId"
  # JenkinsArtifactsBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Sub "${AWS::StackName}-jenkins-artifacts"
  # JenkinsBuildPipeline:
  #   Type: AWS::CodePipeline::Pipeline
  #   Properties:
  #     Name: !Sub "${AWS::StackName}-jenkins-build-pipeline"
  #     RoleArn: !GetAtt [CodePipelineRole, Arn]
  #     Stages:
  #       - Name: Source
  #         Actions:
  #           - Name: SourceAction
  #             ActionTypeId:
  #               Category: Source
  #               Owner: ThirdParty
  #               Provider: GitHub
  #               Version: '1'
  #             OutputArtifacts:
  #               - Name: SourceArtifact
  #             Configuration:
  #               Owner: !Ref GitHubOwner
  #               Repo: !Ref GitHubRepo
  #               Branch: !Ref GitHubBranch
  #               OAuthToken: !Ref GitHubOAuthToken
  #             RunOrder: 1
  #       - Name: Build
  #         Actions:
  #           - Name: BuildAction
  #             ActionTypeId:
  #               Category: Build
  #               Owner: Custom
  #               Provider: Jenkins
  #               Version: '1'
  #             Configuration:
  #               ProjectName: !Ref JenkinsProjectName
  #               Url: !Ref JenkinsUrl
  #               Username: !Ref JenkinsUsername
  #               Password: !Ref JenkinsPassword
  #             InputArtifacts:
  #               - Name: SourceArtifact
  #             OutputArtifacts:
  #               - Name: BuildArtifact
  #             RunOrder: 1
  #       - Name: Deploy
  #         Actions:
  #           - Name: DeployAction
  #             ActionTypeId:
  #               Category: Deploy
  #               Owner: AWS
  #               Provider: S3
  #               Version: '1'
  #             Configuration:
  #               BucketName: !Ref JenkinsArtifactsBucket
  #               ObjectKey: !Ref S3ObjectKey
  #               Extract: true
  #             InputArtifacts:
  #               - Name: BuildArtifact
  #             RunOrder: 1
Outputs:
  MyVpcOutput:
    Description: Id of MyVpc
    Value: !Ref MyVpc
  MySubnetOutput:
    Description: Id of MyVpc
    Value: !Ref MySubnet
  MyEC2InstanceOutput:
    Description: Id of MyEC2Instance
    Value: !Ref MyEC2Instance
  MyEC2InstancePrivateIpOutput:
    Description: Private Ip address of MyEC2Instance
    Value: !GetAtt [MyEC2Instance, PrivateIp]
  MyEC2InstancePublicIpOutput:
    Description: Public Ip address of MyEC2Instance
    Value: !GetAtt [MyEC2Instance, PublicIp]
